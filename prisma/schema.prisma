// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  reclutador
  GL
  Admin
  MK
}

enum Oficina {
  Oficina1
  Oficina2
}

enum UserState {
  ACTIVO
  INACTIVO
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  Oficina       Oficina   @default(Oficina1)
  password      String
  age           Int
  direccion     String
  State         UserState @default(ACTIVO)
  celular       String
  emailVerified DateTime?
  image         String?
  role          Role      @default(reclutador) // Valor por defecto
  ingreso       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones existentes
  Lead               Lead[]
  Task               Task[]
  LeadStatusHistory  LeadStatusHistory[] // Nueva relación
  ContactInteraction ContactInteraction[] // Nueva relación para las interacciones con contactos
  Logs               Log[]
  notifications      Notification[]
  taskNotifications  Task[]               @relation("TaskNotificationRecipients")

  // Relaciones específicas con nombres únicos para Vacancy
  vacanciesReclutador          Vacancy[] @relation("VacancyReclutador")
  vacanciesCheckListAuthor     Vacancy[] @relation("VacancyCheckListAuthor")
  vacanciesMuestraPerfilAuthor Vacancy[] @relation("VacancyMuestraPerfilAuthor")
  VacancyJobDescriptionAuthor  Vacancy[] @relation("VacancyJobDescriptionAuthor")

  // Relación específica con nombre único para Comment
  comments Comment[] @relation("CommentAuthor")
  Vacancy  Vacancy[]
  Comment  Comment[]
  Client   Client[]
}

// Modelo para registrar historial de cambios de estado de leads
model LeadStatusHistory {
  id        String     @id @default(cuid())
  lead      Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId    String
  status    LeadStatus
  changedAt DateTime   @default(now())

  // Para auditoría
  changedBy   User   @relation(fields: [changedById], references: [id], onDelete: Cascade)
  changedById String

  @@index([leadId, changedAt]) // Índice para optimizar consultas por lead y fecha
}

model Sector {
  id     String @id @default(cuid())
  nombre String @unique
  leads  Lead[]
}

model SubSector {
  id     String @id @default(cuid())
  nombre String @unique
  leads  Lead[]
}

model LeadOrigen {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  nombre    String    @unique
  leads     Lead[]
  Client    Client[]
}

enum LeadStatus {
  Contacto
  SocialSelling
  ContactoCalido
  //Se quita prospecciones
  CitaAgendada
  CitaAtendida
  CitaValidada
  Asignadas
  StandBy
}

model Lead {
  id               String     @id @default(cuid())
  empresa          String
  link             String
  status           LeadStatus @default(Contacto)
  contactos        Person[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  numero_empleados Int?
  ubicacion        String?

  // Relaciones con Sector y Origen
  sectorId       String
  sector         Sector              @relation(fields: [sectorId], references: [id])
  origenId       String
  origen         LeadOrigen          @relation(fields: [origenId], references: [id])
  // Relaciones -> Generador de leads
  generadorId    String
  generadorLeads User                @relation(fields: [generadorId], references: [id], onDelete: Cascade)
  statusHistory  LeadStatusHistory[]
  //Relaciones con subsector
  SubSector      SubSector?          @relation(fields: [subSectorId], references: [id])
  subSectorId    String?
  Client         Client[]
}

//modelo de contacto para todos los modulos
model Person {
  id       String  @id @default(cuid())
  name     String
  email    String?
  phone    String?
  position String?
  linkedin String?
  cv       String? // solo para candidatos o en un futuro para donde se necesite

  //relaciones -> contacto de leads
  Lead   Lead?   @relation(fields: [leadId], references: [id])
  leadId String?

  // Nueva relación para las interacciones/conversaciones
  interactions ContactInteraction[]

  // Relaciones específicas con Vacancy
  vacanciesContratado Vacancy[] @relation("VacancyCandidatoContratado")
  vacanciesTernaFinal Vacancy[] @relation("VacancyTernaFinal")
  Client              Client?   @relation(fields: [clientId], references: [id])
  clientId            String?
}

enum VacancyTipo {
  Nueva
  Garantia
}

enum VacancyEstado {
  Hunting
  Cancelada
  Entrevistas
  Perdida
  Placement
}

enum VacancyPrioridad {
  Alta
  Media
  Baja
}

model Vacancy {
  //Data necesaria
  id                    String           @id @default(uuid())
  fechaAsignacion       DateTime
  reclutadorId          String
  reclutador            User             @relation("VacancyReclutador", fields: [reclutadorId], references: [id])
  tipo                  VacancyTipo      @default(Nueva)
  estado                VacancyEstado    @default(Hunting)
  posicion              String
  tiempoTranscurrido    Int?
  Comments              Comment[]
  prioridad             VacancyPrioridad @default(Alta)
  fechaEntrega          DateTime?
  fechaUltimaTerna      DateTime?
  duracionTotal         Int?
  fechaOferta           DateTime?
  candidatoContratado   Person?          @relation("VacancyCandidatoContratado", fields: [candidatoContratadoId], references: [id])
  candidatoContratadoId String?
  salario               Int?
  fechaComision         DateTime?
  monto                 Int?
  valorFactura          Int?
  fee                   Int?
  ternaFinal            Person[]         @relation("VacancyTernaFinal")

  //Data del checklist
  checkListUrl       String?
  checkListName      String?
  checkListType      String?
  checkListSize      Int?
  checkListCreatedAt DateTime?
  checkListUpdatedAt DateTime?
  checkListAuthor    User?     @relation("VacancyCheckListAuthor", fields: [checkListAuthorId], references: [id], onDelete: Cascade)
  checkListAuthorId  String?

  //Data del perfil muestra
  muestraPerfilUrl       String?
  muestraPerfilName      String?
  muestraPerfilType      String?
  muestraPerfilSize      Int?
  muestraPerfilCreatedAt DateTime?
  muestraPerfilUpdatedAt DateTime?
  muestraPerfilAuthor    User?     @relation("VacancyMuestraPerfilAuthor", fields: [muestraPerfilAuthorId], references: [id], onDelete: Cascade)
  muestraPerfilAuthorId  String?

  //Datos del job description
  jobDescriptionUrl       String?
  jobDescriptionName      String?
  jobDescriptionType      String?
  jobDescriptionSize      Int?
  jobDescriptionCreatedAt DateTime?
  jobDescriptionUpdatedAt DateTime?
  jobDescriptionAuthor    User?     @relation("VacancyJobDescriptionAuthor", fields: [jobDescriptionAuthorId], references: [id], onDelete: Cascade)
  jobDescriptionAuthorId  String?

  //Datos del usuario que creo la vacante
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum ClienteEtiqueta {
  PreCliente
  Cliente
}

model Client {
  //Data principal
  id            String          @id @default(cuid())
  //Relacion con el lead
  leadId        String?
  lead          Lead?           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  //Etiqueta del cliente
  etiqueta      ClienteEtiqueta @default(PreCliente)
  //Data de la cuenta y estadisticas
  cuenta        String?
  asignadas     Int?
  perdidas      Int?
  canceladas    Int?
  placements    Int?
  tp_placement  Int?
  contactos     Person[]
  modalidad     String?
  fee           Int?
  dias_credito  Int?
  tipo_factura  String?
  razon_social  String?
  regimen       String?
  rfc           String?
  codigo_postal String?
  como_factura  String?
  portal_site   String?
  comentarios   Comment[]
  //Origen en caso de que no haya lead
  origenId      String?
  origen        LeadOrigen?     @relation(fields: [origenId], references: [id])
  //Relacion con el usuario
  usuarioId     String
  usuario       User            @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  isTask    Boolean  @default(false)
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?  @unique
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?
}

enum TaskStatus {
  Pending
  Done
}

// Modelo para las interacciones con contactos
model ContactInteraction {
  id         String   @id @default(cuid())
  content    String // Contenido del comentario o estado de la negociación
  contacto   Person   @relation(fields: [contactoId], references: [id], onDelete: Cascade)
  contactoId String
  autor      User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  autorId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  linkedTasks Task[] // Relación uno a muchos a tareas

  // Campo opcional para adjuntar un archivo
  attachmentUrl  String?
  attachmentName String?
  attachmentType String?

  @@index([contactoId, createdAt]) // Índice para optimizar consultas por contacto y fecha
}

model Task {
  id                     String         @id @default(uuid())
  title                  String
  description            String
  assignedTo             User           @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId           String
  comment                Comment?       @relation
  commentId              String?
  status                 TaskStatus     @default(Pending)
  dueDate                DateTime
  createdAt              DateTime       @default(now())
  notifications          Notification[]
  notifyOnComplete       Boolean        @default(false)
  notificationRecipients User[]         @relation("TaskNotificationRecipients")

  // Relación bidireccional con ContactInteraction
  // Una tarea solo puede estar vinculada a una interacción
  linkedInteraction ContactInteraction? @relation(fields: [interactionId], references: [id])
  interactionId     String?

  @@index([interactionId]) // Índice para optimizar consultas por interacción vinculada
}

enum LogAction {
  Publicar
  Eliminar
  Actualizar
  Ingresar
}

enum LogModule {
  Leads
  Reclutamiento
  Sistema
  Usuarios
}

model Log {
  id        String    @id @default(cuid())
  autor     User      @relation(fields: [autorId], references: [id], onDelete: Cascade)
  autorId   String
  action    LogAction
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  file      String?
  logModule LogModule @default(Sistema)
}

enum NotificationType {
  TASK_INITIALIZED
  TASK_COMPLETED
  TASK_OVERDUE
  EDIT
}

enum NotificationStatus {
  UNREAD
  READ
}

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType
  status      NotificationStatus @default(UNREAD)
  message     String
  task        Task?              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?
  recipient   User               @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([recipientId, status])
}
