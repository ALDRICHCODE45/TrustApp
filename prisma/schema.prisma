// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  reclutador
  GL
  Admin
  MK
}

enum Oficina {
  Oficina1
  Oficina2
}

enum UserState {
  ACTIVO
  INACTIVO
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  Oficina       Oficina   @default(Oficina1)
  password      String
  age           Int
  direccion     String
  State         UserState @default(ACTIVO)
  celular       String
  emailVerified DateTime?
  image         String?
  role          Role      @default(reclutador) // Valor por defecto
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Lead      Lead[]
  Comment   Comment[]
  Task      Task[]
  LeadStatusHistory   LeadStatusHistory[] // Nueva relación
  ContactInteraction  ContactInteraction[] // Nueva relación para las interacciones con contactos
}

// Modelo para registrar historial de cambios de estado de leads
model LeadStatusHistory {
  id        String     @id @default(cuid())
  lead      Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId    String
  status    LeadStatus
  changedAt DateTime   @default(now())
  
  // Para auditoría
  changedBy User       @relation(fields: [changedById], references: [id], onDelete: Cascade)
  changedById String
  @@index([leadId, changedAt]) // Índice para optimizar consultas por lead y fecha
}

model Sector {
  id    String @id @default(cuid())
  nombre String @unique
  leads  Lead[]
}

model LeadOrigen {
  id    String @id @default(cuid())
  nombre String @unique
  leads  Lead[]
}

enum LeadStatus {
  Contacto
  SocialSelling
  ContactoCalido
  Prospecto
  CitaAgendada
  CitaValidada
  Asignadas
  StandBy
}

model Lead {
  id               String     @id @default(cuid())
  empresa          String
  link             String
  status           LeadStatus @default(Contacto)
  contactos        Person[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  // Relaciones con Sector y Origen
  sectorId         String
  sector           Sector      @relation(fields: [sectorId], references: [id])
  origenId         String
  origen           LeadOrigen  @relation(fields: [origenId], references: [id])
  // Relaciones -> Generador de leads
  generadorId      String
  generadorLeads   User        @relation(fields: [generadorId], references: [id], onDelete: Cascade)
  statusHistory    LeadStatusHistory[]
}

//modelo de contacto para todos los moodulos
model Person {
  id       String  @id @default(cuid())
  name     String
  email    String? // opcional para cuando no se tengan estos datos
  phone    String?
  position String?
  cv       String? // solo para candidatos o en un futuro para donde se necesite
  //relaciones -> contacto de leads
  Lead     Lead?   @relation(fields: [leadId], references: [id])
  leadId   String?
  
  // Nueva relación para las interacciones/conversaciones
  interactions ContactInteraction[]
}

model Vacancy {
  id String @id @default(uuid())
  Comment Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  isTask    Boolean  @default(false)
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?  @unique
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId String
  author    User     @relation(fields: [authorId], references: [id], onDelete:Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

enum TaskStatus {
  Pending
  Done
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String
  assignedTo   User       @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId String
  comment      Comment?   @relation
  commentId    String?
  status       TaskStatus @default(Pending)
  dueDate      DateTime
  createdAt    DateTime   @default(now())
}


// Nuevo modelo para las interacciones con contactos
model ContactInteraction {
  id          String   @id @default(cuid())
  content     String   // Contenido del comentario o estado de la negociación
  contacto    Person   @relation(fields: [contactoId], references: [id], onDelete: Cascade)
  contactoId  String
  autor       User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  autorId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Campo opcional para adjuntar un archivo
  attachmentUrl String?
  attachmentName String?
  attachmentType String?
  
  @@index([contactoId, createdAt]) // Índice para optimizar consultas por contacto y fecha
}
